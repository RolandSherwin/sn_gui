name: Create Release

on:
  push:
    tags:
      - 'v*'
      
jobs:
  publish-linux:
    name: Publish binary for Linux
    runs-on: ubuntu-latest
    container:
      # Use ubuntu-18.04 to compile with glibc 2.27
      image: ubuntu:18.04
    steps:
    - uses: actions/checkout@v3
    - name: Install needed dependencies
      run: |
        apt-get update && apt-get install -y curl
        apt-get install build-essential -y
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    - name: Build
      run: cargo build --release --locked
    - name: Upload binaries to release
      uses: svenstaro/upload-release-action@2.3.0
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: target/release/sn_gui
        asset_name: sn_gui-linux-amd64
        tag: ${{ github.ref }}

  publish-macos-windows:
    name: Publish binary for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-12, windows-2022]
        include:
          - os: macos-12
            artifact_name: sn_gui
            asset_name: sn_gui-macos-amd64
          - os: windows-2022
            artifact_name: sn_gui.exe
            asset_name: sn_gui-windows-amd64.exe
    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    - name: Build
      run: cargo build --release --locked
    - name: Upload binaries to release
      uses: svenstaro/upload-release-action@2.3.0
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: target/release/${{ matrix.artifact_name }}
        asset_name: ${{ matrix.asset_name }}
        tag: ${{ github.ref }}

  publish-macos-apple-silicon:
    name: Publish binary for macOS silicon
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-12
            target: aarch64-apple-darwin
            asset_name: sn_gui-macos-apple-silicon
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Installing Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          target: ${{ matrix.target }}
          override: true
      - name: Cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
      - name: Upload the binary to release
        uses: svenstaro/upload-release-action@2.3.0
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/${{ matrix.target }}/release/sn_gui
          asset_name: ${{ matrix.asset_name }}
          tag: ${{ github.ref }}

  publish-aarch64:
    name: Publish binary for aarch64
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - build: aarch64
            os: ubuntu-18.04
            target: aarch64-unknown-linux-gnu
            linker: gcc-aarch64-linux-gnu
            use-cross: true
            asset_name: sn_gui-linux-aarch64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Installing Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          target: ${{ matrix.target }}
          override: true
      - name: APT update
        run: |
          sudo apt update
      - name: Install target specific tools
        if: matrix.use-cross
        run: |
          sudo apt-get install -y ${{ matrix.linker }}
      - name: Configure target aarch64 GNU
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        ## Environment variable is not passed using env:
        ## LD gold won't work with MUSL
        # env:
        #   JEMALLOC_SYS_WITH_LG_PAGE: 16
        #   RUSTFLAGS: '-Clink-arg=-fuse-ld=gold'
        run: |
          echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config
          echo 'JEMALLOC_SYS_WITH_LG_PAGE=16' >> $GITHUB_ENV
      - name: Cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          use-cross: ${{ matrix.use-cross }}
          args: --release --target ${{ matrix.target }}
      - name: List target output files
        run: ls -lR ./target
      - name: Upload the binary to release
        uses: svenstaro/upload-release-action@2.3.0
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/${{ matrix.target }}/release/sn_gui
          asset_name: ${{ matrix.asset_name }}
          tag: ${{ github.ref }}
